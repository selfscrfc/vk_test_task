// Code generated by MockGen. DO NOT EDIT.
// Source: ./tokenRepository.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTokenRepositoryInterface is a mock of TokenRepositoryInterface interface.
type MockTokenRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTokenRepositoryInterfaceMockRecorder
}

// MockTokenRepositoryInterfaceMockRecorder is the mock recorder for MockTokenRepositoryInterface.
type MockTokenRepositoryInterfaceMockRecorder struct {
	mock *MockTokenRepositoryInterface
}

// NewMockTokenRepositoryInterface creates a new mock instance.
func NewMockTokenRepositoryInterface(ctrl *gomock.Controller) *MockTokenRepositoryInterface {
	mock := &MockTokenRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockTokenRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenRepositoryInterface) EXPECT() *MockTokenRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateAccessToken mocks base method.
func (m *MockTokenRepositoryInterface) CreateAccessToken(userId string, isAdmin bool) (string, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessToken", userId, isAdmin)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateAccessToken indicates an expected call of CreateAccessToken.
func (mr *MockTokenRepositoryInterfaceMockRecorder) CreateAccessToken(userId, isAdmin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessToken", reflect.TypeOf((*MockTokenRepositoryInterface)(nil).CreateAccessToken), userId, isAdmin)
}

// CreateRefreshToken mocks base method.
func (m *MockTokenRepositoryInterface) CreateRefreshToken(isAdmin bool) (string, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefreshToken", isAdmin)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRefreshToken indicates an expected call of CreateRefreshToken.
func (mr *MockTokenRepositoryInterfaceMockRecorder) CreateRefreshToken(isAdmin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefreshToken", reflect.TypeOf((*MockTokenRepositoryInterface)(nil).CreateRefreshToken), isAdmin)
}

// CreateTokensPair mocks base method.
func (m *MockTokenRepositoryInterface) CreateTokensPair(userId string, isAdmin bool) (string, string, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTokensPair", userId, isAdmin)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(int64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// CreateTokensPair indicates an expected call of CreateTokensPair.
func (mr *MockTokenRepositoryInterfaceMockRecorder) CreateTokensPair(userId, isAdmin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTokensPair", reflect.TypeOf((*MockTokenRepositoryInterface)(nil).CreateTokensPair), userId, isAdmin)
}

// UpdateAccessToken mocks base method.
func (m *MockTokenRepositoryInterface) UpdateAccessToken(userId, refreshToken string) (string, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccessToken", userId, refreshToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateAccessToken indicates an expected call of UpdateAccessToken.
func (mr *MockTokenRepositoryInterfaceMockRecorder) UpdateAccessToken(userId, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessToken", reflect.TypeOf((*MockTokenRepositoryInterface)(nil).UpdateAccessToken), userId, refreshToken)
}

// VerifyRefreshToken mocks base method.
func (m *MockTokenRepositoryInterface) VerifyRefreshToken(userId, tokenString string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyRefreshToken", userId, tokenString)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyRefreshToken indicates an expected call of VerifyRefreshToken.
func (mr *MockTokenRepositoryInterfaceMockRecorder) VerifyRefreshToken(userId, tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyRefreshToken", reflect.TypeOf((*MockTokenRepositoryInterface)(nil).VerifyRefreshToken), userId, tokenString)
}
