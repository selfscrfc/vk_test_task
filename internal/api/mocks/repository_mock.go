// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	reflect "reflect"
	api_models "vk_test_task/internal/api/models"

	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateActor mocks base method.
func (m *MockRepositoryInterface) CreateActor(params api_models.CreateActorParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActor", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateActor indicates an expected call of CreateActor.
func (mr *MockRepositoryInterfaceMockRecorder) CreateActor(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActor", reflect.TypeOf((*MockRepositoryInterface)(nil).CreateActor), params)
}

// CreateFilm mocks base method.
func (m *MockRepositoryInterface) CreateFilm(params api_models.CreateFilmParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFilm", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFilm indicates an expected call of CreateFilm.
func (mr *MockRepositoryInterfaceMockRecorder) CreateFilm(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilm", reflect.TypeOf((*MockRepositoryInterface)(nil).CreateFilm), params)
}

// DeleteActor mocks base method.
func (m *MockRepositoryInterface) DeleteActor(actorId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActor", actorId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActor indicates an expected call of DeleteActor.
func (mr *MockRepositoryInterfaceMockRecorder) DeleteActor(actorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActor", reflect.TypeOf((*MockRepositoryInterface)(nil).DeleteActor), actorId)
}

// DeleteFilm mocks base method.
func (m *MockRepositoryInterface) DeleteFilm(filmId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilm", filmId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFilm indicates an expected call of DeleteFilm.
func (mr *MockRepositoryInterfaceMockRecorder) DeleteFilm(filmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilm", reflect.TypeOf((*MockRepositoryInterface)(nil).DeleteFilm), filmId)
}

// GetActors mocks base method.
func (m *MockRepositoryInterface) GetActors() (api_models.GetActorsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActors")
	ret0, _ := ret[0].(api_models.GetActorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActors indicates an expected call of GetActors.
func (mr *MockRepositoryInterfaceMockRecorder) GetActors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActors", reflect.TypeOf((*MockRepositoryInterface)(nil).GetActors))
}

// GetFilms mocks base method.
func (m *MockRepositoryInterface) GetFilms(params api_models.GetFilmsParams) (api_models.GetFilmsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilms", params)
	ret0, _ := ret[0].(api_models.GetFilmsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilms indicates an expected call of GetFilms.
func (mr *MockRepositoryInterfaceMockRecorder) GetFilms(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilms", reflect.TypeOf((*MockRepositoryInterface)(nil).GetFilms), params)
}

// SearchFilmByActorName mocks base method.
func (m *MockRepositoryInterface) SearchFilmByActorName(actorName string) (api_models.SearchFilmResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFilmByActorName", actorName)
	ret0, _ := ret[0].(api_models.SearchFilmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFilmByActorName indicates an expected call of SearchFilmByActorName.
func (mr *MockRepositoryInterfaceMockRecorder) SearchFilmByActorName(actorName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFilmByActorName", reflect.TypeOf((*MockRepositoryInterface)(nil).SearchFilmByActorName), actorName)
}

// SearchFilmByName mocks base method.
func (m *MockRepositoryInterface) SearchFilmByName(name string) (api_models.SearchFilmResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFilmByName", name)
	ret0, _ := ret[0].(api_models.SearchFilmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFilmByName indicates an expected call of SearchFilmByName.
func (mr *MockRepositoryInterfaceMockRecorder) SearchFilmByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFilmByName", reflect.TypeOf((*MockRepositoryInterface)(nil).SearchFilmByName), name)
}

// SignIn mocks base method.
func (m *MockRepositoryInterface) SignIn(login string) (api_models.SignInRepositoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", login)
	ret0, _ := ret[0].(api_models.SignInRepositoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockRepositoryInterfaceMockRecorder) SignIn(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockRepositoryInterface)(nil).SignIn), login)
}

// SignUp mocks base method.
func (m *MockRepositoryInterface) SignUp(login, hashPassword, userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", login, hashPassword, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockRepositoryInterfaceMockRecorder) SignUp(login, hashPassword, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockRepositoryInterface)(nil).SignUp), login, hashPassword, userId)
}

// UpdateActor mocks base method.
func (m *MockRepositoryInterface) UpdateActor(params api_models.UpdateActorParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActor", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActor indicates an expected call of UpdateActor.
func (mr *MockRepositoryInterfaceMockRecorder) UpdateActor(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActor", reflect.TypeOf((*MockRepositoryInterface)(nil).UpdateActor), params)
}

// UpdateFilm mocks base method.
func (m *MockRepositoryInterface) UpdateFilm(params api_models.UpdateFilmParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilm", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFilm indicates an expected call of UpdateFilm.
func (mr *MockRepositoryInterfaceMockRecorder) UpdateFilm(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilm", reflect.TypeOf((*MockRepositoryInterface)(nil).UpdateFilm), params)
}
